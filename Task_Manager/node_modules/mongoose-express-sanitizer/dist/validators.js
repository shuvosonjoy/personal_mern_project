"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _mongoose = _interopRequireDefault(require("mongoose"));

var possibleTypes = ['String', 'Number', 'Boolean', 'Array', 'Date', 'Map', 'Decimal128', 'ObjectId', 'Buffer'];

var isArray = function isArray(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;
  if (schemaAttribute["enum"]) verifyValidEnumForArray(schemaAttribute["enum"], value);
  if (schemaAttribute.max) verifyMaxLengthArray(schemaAttribute.max, value);
  if (schemaAttribute.min) verifyMinLengthArray(schemaAttribute.min, value);

  if (!Array.isArray(value)) {
    throw {
      message: "Expected Array, but received '".concat((0, _typeof2["default"])(value), "'."),
      httpErrorCode: 400
    };
  }
};

var isBoolean = function isBoolean(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;

  if (typeof value !== 'boolean') {
    throw {
      message: "Expected a boolean, but received '".concat((0, _typeof2["default"])(value), "'."),
      httpErrorCode: 400
    };
  }

  return;
};

var isConvertableToDecimal128 = function isConvertableToDecimal128(value) {
  return typeof value !== 'string' && typeof value !== 'number' ? false : true;
};

var isDate = function isDate(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (schemaAttribute.max) verifyMaxValue(schemaAttribute.max, value);
  if (schemaAttribute.min) verifyMinValue(schemaAttribute.min, value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;

  if (!(value instanceof Date && !isNaN(value))) {
    throw {
      message: "Expected a valid Date object, but received '".concat((0, _typeof2["default"])(value), "'."),
      httpErrorCode: 400
    };
  }
};

var isNumber = function isNumber(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;
  if (schemaAttribute.max || schemaAttribute.min === 0) verifyMaxValue(schemaAttribute.max, value);
  if (schemaAttribute.min || schemaAttribute.min === 0) verifyMinValue(schemaAttribute.min, value);
  if (typeof value !== 'number') throw {
    message: "Expected a number, but received '".concat((0, _typeof2["default"])(value), "'."),
    httpErrorCode: 400
  };
  return;
};

var isRequired = function isRequired(value) {
  if (value === undefined || value === null || value === '') {
    throw {
      message: 'The attribute is required.',
      httpErrorCode: 400
    };
  }
};

var isString = function isString(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (!schemaAttribute.required && (value === undefined || value === null || value === '')) return;
  if (schemaAttribute.maxlength) verifyMaxLengthString(schemaAttribute.maxlength, value);
  if (schemaAttribute.minlength) verifyMinLengthString(schemaAttribute.minlength, value);

  if (typeof value !== 'string') {
    throw {
      message: "Expected a string, but received '".concat((0, _typeof2["default"])(value), "'."),
      httpErrorCode: 400
    };
  }

  return;
};

var isValidObjectId = function isValidObjectId(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (schemaAttribute.max) verifyMaxValue(schemaAttribute.max, value);
  if (schemaAttribute.min) verifyMinValue(schemaAttribute.min, value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;

  if (!_mongoose["default"].Types.ObjectId.isValid(value) || value.length !== 24 || typeof value !== 'string') {
    throw {
      message: 'Invalid ObjectId.',
      httpErrorCode: 400
    };
  }

  return;
};

var isValidBuffer = function isValidBuffer(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (schemaAttribute.max) verifyMaxValue(schemaAttribute.max, value);
  if (schemaAttribute.min) verifyMinValue(schemaAttribute.min, value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;

  if (!Buffer.isBuffer(value)) {
    throw {
      message: 'Invalid Buffer.',
      httpErrorCode: 400
    };
  }

  return;
};

var isValidDecimal128 = function isValidDecimal128(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (schemaAttribute.max) verifyMaxValue(schemaAttribute.max, value);
  if (schemaAttribute.min) verifyMinValue(schemaAttribute.min, value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;

  if (!validateNumericString(value)) {
    throw {
      message: 'Invalid Decimal128.',
      httpErrorCode: 400
    };
  }

  if (!isConvertableToDecimal128(value)) {
    throw {
      message: 'Invalid Decimal128.',
      httpErrorCode: 400
    };
  }

  return;
};

var isValidMap = function isValidMap(schemaAttribute, value) {
  if (schemaAttribute.required) isRequired(value);
  if (schemaAttribute["enum"]) verifyEnumValue(schemaAttribute, value);
  if (schemaAttribute.max) verifyMaxValue(schemaAttribute.max, value);
  if (schemaAttribute.min) verifyMinValue(schemaAttribute.min, value);
  if (!schemaAttribute.required && (value === undefined || value === null)) return;
  var of = schemaAttribute.of;

  if (!((0, _typeof2["default"])(value) === 'object' || Array.isArray(value))) {
    throw {
      message: 'Invalid Map.',
      httpErrorCode: 400
    };
  }

  if ((0, _typeof2["default"])(value) === 'object' && !Array.isArray(value)) {
    for (var key in value) {
      if (!isValidType(value[key], of)) {
        throw {
          message: "Invalid Map. The value of the key '".concat(key, "' must be a ").concat(of, "."),
          httpErrorCode: 400
        };
      }
    }
  }

  if (Array.isArray(value)) {
    value.forEach(function (item, index) {
      if (!isValidType(item, of)) {
        throw {
          message: "Invalid Map. The value of the key '".concat(index, "' must be a ").concat(of, "."),
          httpErrorCode: 400
        };
      }
    });
  }
};

var getMapTypeOf = function getMapTypeOf(value) {
  if (typeof value === 'string' && possibleTypes.includes(value)) {
    return value;
  }

  if (value instanceof _mongoose["default"].Schema.Types.ObjectId) {
    return 'ObjectId';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Decimal128) {
    return 'Decimal128';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Buffer) {
    return 'Buffer';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Map) {
    return 'Map';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Array) {
    return 'Array';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Date) {
    return 'Date';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Number) {
    return 'Number';
  }

  if (value instanceof _mongoose["default"].Schema.Types.String) {
    return 'String';
  }

  if (value instanceof _mongoose["default"].Schema.Types.Boolean) {
    return 'Boolean';
  }

  if (typeof value === 'function') {
    return value.schemaName || value.name;
  }

  if ((0, _typeof2["default"])(value) === 'object') {
    if (value.type && value.type.schemaName === 'ObjectId') {
      return 'ObjectId';
    }

    return 'Object';
  }

  if (Array.isArray(value)) {
    return 'Array';
  }

  if (value instanceof Date) {
    return 'Date';
  }

  if (typeof value === 'number') {
    return 'Number';
  }

  if (typeof value === 'string') {
    return 'String';
  }

  if (typeof value === 'boolean') {
    return 'Boolean';
  }
};

var isValidType = function isValidType(value, type) {
  var _mongoose$Schema$Type = _mongoose["default"].Schema.Types,
      Decimal128 = _mongoose$Schema$Type.Decimal128,
      ObjectId = _mongoose$Schema$Type.ObjectId,
      Map = _mongoose$Schema$Type.Map;
  var typeOf = getMapTypeOf(type);

  switch (typeOf) {
    case 'Date':
      return value instanceof Date;

    case 'ObjectId':
      return value instanceof ObjectId || typeof value === 'string';

    case 'Decimal128':
      return value instanceof Decimal128 || typeof value === 'number';

    case 'Buffer':
      return Buffer.isBuffer(value);

    case 'Array':
      return Array.isArray(value);

    case 'String':
      return value instanceof String || typeof value === 'string';

    case 'Number':
      return value instanceof Number || typeof value === 'number';

    case 'Boolean':
      return value instanceof Boolean || typeof value === 'boolean';

    case 'Map':
      return value instanceof Map;

    default:
      break;
  }

  switch (type) {
    case String:
      return value instanceof String;

    case Number:
      return value instanceof Number;

    case Boolean:
      return value instanceof Boolean;

    case Array:
      return value instanceof Array;

    case Date:
      return value instanceof Date;

    case 'Map':
      return (0, _typeof2["default"])(value) !== 'object' || Array.isArray(value);

    case Map:
      return value instanceof Map;

    case 'Decimal128':
      return validateNumericString(value);

    case Decimal128:
      return value instanceof Decimal128;

    case 'ObjectId':
      return _mongoose["default"].Types.ObjectId.isValid(value) || value.length === 24 && typeof value === 'string';

    case ObjectId:
      return value instanceof ObjectId;

    case 'Buffer':
      return Buffer.isBuffer(value);

    case Buffer:
      return Buffer.isBuffer(value);

    default:
      throw {
        message: "Type ".concat((0, _typeof2["default"])(value), " not supported."),
        httpErrorCode: 400
      };
  }
};

var validateNumericString = function validateNumericString(value) {
  return typeof value === 'string' ? /^[\d.]+$/.test(value) : true;
};

var verifyEnumValue = function verifyEnumValue(schemaAttribute, value) {
  if (!schemaAttribute["enum"].includes(value)) {
    throw {
      message: "Invalid value. The value must be one of the following: ".concat(schemaAttribute["enum"].join(', '), "."),
      httpErrorCode: 400
    };
  }
};

var verifyMinLengthArray = function verifyMinLengthArray(minLength, attribute) {
  if (!Array.isArray(attribute) || attribute.length < minLength) {
    throw {
      message: "The array length must be at least ".concat(minLength, "."),
      httpErrorCode: 400
    };
  }
};

var verifyMaxLengthArray = function verifyMaxLengthArray(maxLength, attribute) {
  if (!Array.isArray(attribute) || attribute.length > maxLength) {
    throw {
      message: "The array length must not exceed ".concat(maxLength, "."),
      httpErrorCode: 400
    };
  }
};

var verifyMinLengthString = function verifyMinLengthString(minLength, attribute) {
  if (attribute.length < minLength) {
    throw {
      message: "The string length must be at least ".concat(minLength, "."),
      httpErrorCode: 400
    };
  }
};

var verifyMaxLengthString = function verifyMaxLengthString(maxLength, attribute) {
  if (attribute.length > maxLength) {
    throw {
      message: "The string length must not exceed ".concat(maxLength, "."),
      httpErrorCode: 400
    };
  }
};

var verifyValidEnumForArray = function verifyValidEnumForArray(enumValues, attribute) {
  if (!Array.isArray(attribute) || !attribute.every(function (value) {
    return enumValues.includes(value);
  })) {
    throw {
      message: "Invalid value in the array. The values must be one of ".concat(enumValues.join(', '), "."),
      httpErrorCode: 400
    };
  }
};

var verifyMinValue = function verifyMinValue(min, attribute) {
  if (attribute < min) {
    throw {
      message: "Value ".concat(attribute, " is less than the minimum value setted."),
      httpErrorCode: 400
    };
  }
};

var verifyMaxValue = function verifyMaxValue(max, attribute) {
  if (attribute > max) {
    throw {
      message: "Value ".concat(attribute, " is greater than the maximum value setted."),
      httpErrorCode: 400
    };
  }
};

module.exports = {
  isArray: isArray,
  isBoolean: isBoolean,
  isDate: isDate,
  isNumber: isNumber,
  isString: isString,
  isValidBuffer: isValidBuffer,
  isValidDecimal128: isValidDecimal128,
  isValidMap: isValidMap,
  isValidObjectId: isValidObjectId
};