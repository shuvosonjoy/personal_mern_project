"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _validators = require("./validators");

var _mongoose = _interopRequireDefault(require("mongoose"));

describe('String Validator', function () {
  it('should validate a string with success', function () {
    expect(function () {
      return (0, _validators.isString)({
        type: 'String'
      }, 'string');
    }).not.toThrow();
  });
  it('should validate a string with success for sending null to not required value', function () {
    expect(function () {
      return (0, _validators.isString)({
        type: 'String'
      }, null);
    }).not.toThrow();
  });
  it('should validate a string with success for sending undefined to not required value', function () {
    expect(function () {
      return (0, _validators.isString)({
        type: 'String'
      }, undefined);
    }).not.toThrow();
  });
  it('should validate a string with success for sending empty string to not required value', function () {
    expect(function () {
      return (0, _validators.isString)({
        type: 'String'
      }, '');
    }).not.toThrow();
  });
  it('must validate a string and fail for sending non string value', function () {
    expect(function () {
      (0, _validators.isString)({
        type: 'String',
        required: true
      }, 1);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Expected a string, but received \'number\'.'
    });
  });
  it('must validate a string and fail for sending null to required value', function () {
    expect(function () {
      (0, _validators.isString)({
        type: 'String',
        required: true
      }, null);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a string and fail for sending an empty string to a required value', function () {
    expect(function () {
      (0, _validators.isString)({
        type: 'String',
        required: true
      }, '');
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a string and fail for sending undefined to required value', function () {
    expect(function () {
      (0, _validators.isString)({
        type: 'String',
        required: true
      }, undefined);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a string and fail for sending invalid value', function () {
    expect(function () {
      (0, _validators.isString)({
        type: 'String',
        "enum": ['a', 'b']
      }, 'c');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid value. The value must be one of the following: a, b.'
    });
  });
});
describe('Boolean Validator', function () {
  it('should validate a boolean with success', function () {
    expect(function () {
      return (0, _validators.isBoolean)({
        type: 'Boolean'
      }, true);
    }).not.toThrow();
  });
  it('should validate a boolean with success for sending null to not required value', function () {
    expect(function () {
      return (0, _validators.isBoolean)({
        type: 'Boolean'
      }, null);
    }).not.toThrow();
  });
  it('should validate a boolean with success for sending undefined to not required value', function () {
    expect(function () {
      return (0, _validators.isBoolean)({
        type: 'Boolean'
      }, undefined);
    }).not.toThrow();
  });
  it('must validate a boolean and fail for sending null to required value', function () {
    expect(function () {
      (0, _validators.isBoolean)({
        type: 'Boolean',
        required: true
      }, null);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a boolean and fail for sending an empty string to a required value', function () {
    expect(function () {
      (0, _validators.isBoolean)({
        type: 'Boolean',
        required: true
      }, '');
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a boolean and fail for sending undefined to required value', function () {
    expect(function () {
      (0, _validators.isBoolean)({
        type: 'Boolean',
        required: true
      }, undefined);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
});
describe('Number Validator', function () {
  it('should validate a number with success', function () {
    expect(function () {
      return (0, _validators.isNumber)({
        type: 'Number'
      }, 0);
    }).not.toThrow();
  });
  it('should validate a number with success for sending null to not required value', function () {
    expect(function () {
      return (0, _validators.isNumber)({
        type: 'Number'
      }, null);
    }).not.toThrow();
  });
  it('should validate a number with success for sending undefined to not required value', function () {
    expect(function () {
      return (0, _validators.isNumber)({
        type: 'Number'
      }, undefined);
    }).not.toThrow();
  });
  it('must validate a number and fail for sending null to required value', function () {
    expect(function () {
      (0, _validators.isNumber)({
        type: 'Number',
        required: true
      }, null);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a number and fail for sending an empty string to a required value', function () {
    expect(function () {
      (0, _validators.isNumber)({
        type: 'Number',
        required: true
      }, '');
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a number and fail for sending undefined to required value', function () {
    expect(function () {
      (0, _validators.isNumber)({
        type: 'Number',
        required: true
      }, undefined);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a number and fail for sending invalid value', function () {
    expect(function () {
      (0, _validators.isNumber)({
        type: 'Number',
        "enum": [1, 2]
      }, 3);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid value. The value must be one of the following: 1, 2.'
    });
  });
  it('must validate a number and fail for sending a value bellow to the minimum setted', function () {
    expect(function () {
      (0, _validators.isNumber)({
        type: 'Number',
        min: 4
      }, 3);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Value 3 is less than the minimum value setted.'
    });
  });
  it('must validate a number and fail for sending a value is greater thans the maximum setted', function () {
    expect(function () {
      (0, _validators.isNumber)({
        type: 'Number',
        max: 3
      }, 4);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Value 4 is greater than the maximum value setted.'
    });
  });
});
describe('Date Validator', function () {
  it('should validate an Date with success', function () {
    expect(function () {
      return (0, _validators.isDate)({
        type: 'Date'
      }, new Date());
    }).not.toThrow();
  });
  it('should validate an Date with success passing a null value without required setted', function () {
    expect(function () {
      return (0, _validators.isDate)({
        type: 'Date'
      }, null);
    }).not.toThrow();
  });
  it('should validate an Date with success passing a undefined value without required setted', function () {
    expect(function () {
      return (0, _validators.isDate)({
        type: 'Date'
      }, undefined);
    }).not.toThrow();
  });
  it('should validate an Date with error passing a null value with required setted', function () {
    expect(function () {
      (0, _validators.isDate)({
        type: 'Date',
        required: true
      }, null);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('should validate an Date with error passing a undefined value with required setted', function () {
    expect(function () {
      (0, _validators.isDate)({
        type: 'Date',
        required: true
      }, undefined);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('should try validate an Date with fail passing a empty string value', function () {
    expect(function () {
      (0, _validators.isDate)({
        type: 'Date'
      }, '');
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'Expected a valid Date object, but received \'string\'.'
    });
  });
  it('should try validate an Date with fail passing a date out of minimum setted', function () {
    var min = new Date('01-01-2000');
    var value = new Date('01-01-1999');
    expect(function () {
      (0, _validators.isDate)({
        type: 'Date',
        min: min
      }, value);
    }).toThrow({
      'httpErrorCode': 400,
      'message': "Value ".concat(value, " is less than the minimum value setted.")
    });
  });
  it('should try validate an Date with fail passing a date out of maximum setted', function () {
    var max = new Date('01-01-1999');
    var value = new Date('01-01-2000');
    expect(function () {
      (0, _validators.isDate)({
        type: 'Date',
        max: max
      }, value);
    }).toThrow({
      'httpErrorCode': 400,
      'message': "Value ".concat(value, " is greater than the maximum value setted.")
    });
  });
  it('should try validate an Date with fail passing a date out of enum setted', function () {
    var validValue = new Date('01-01-1999');
    var value = new Date('01-01-2000');
    expect(function () {
      (0, _validators.isDate)({
        type: 'Date',
        "enum": [validValue]
      }, value);
    }).toThrow({
      'httpErrorCode': 400,
      'message': "Invalid value. The value must be one of the following: ".concat(validValue, ".")
    });
  });
  it('should try validate an Date with success when the value is one of enum setted', function () {
    var date1 = new Date('01-01-1999');
    var date2 = new Date('01-01-1998');
    var response = (0, _validators.isDate)({
      type: 'Date',
      "enum": [date1, date2]
    }, date1);
    expect(response).toBe(undefined);
  });
});
describe('Array Validator', function () {
  it('should validate an Array with success', function () {
    expect(function () {
      return (0, _validators.isArray)({
        type: 'Array'
      }, []);
    }).not.toThrow();
  });
  it('should validate an Date with success passing a null value without required setted', function () {
    expect(function () {
      return (0, _validators.isArray)({
        type: 'Array'
      }, null);
    }).not.toThrow();
  });
  it('should validate an Date with success passing a undefined value without required setted', function () {
    expect(function () {
      return (0, _validators.isArray)({
        type: 'Array'
      }, undefined);
    }).not.toThrow();
  });
  it('should validate an Date with success passing a null value with required setted', function () {
    expect(function () {
      (0, _validators.isArray)({
        type: 'Array',
        required: true
      }, null);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('should validate an Date with success passing a undefined value with required setted', function () {
    expect(function () {
      (0, _validators.isArray)({
        type: 'Array',
        required: true
      }, undefined);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
});
describe('ObjectId Validator', function () {
  it('should validate an ObjectId with success', function () {
    expect(function () {
      return (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, '5f7e4d7b0b9a8b2c9c8b4567');
    }).not.toThrow();
  });
  it('should validate an ObjectId with success passing a null value without required setted', function () {
    expect(function () {
      return (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, null);
    }).not.toThrow();
  });
  it('should validate an ObjectId with success passing a undefined value without required setted', function () {
    expect(function () {
      return (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, undefined);
    }).not.toThrow();
  });
  it('should validate an ObjectId with error passing a null value with required setted', function () {
    expect(function () {
      (0, _validators.isValidObjectId)({
        type: 'ObjectId',
        required: true
      }, null);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('should validate an ObjectId with error passing a undefined value with required setted', function () {
    expect(function () {
      (0, _validators.isValidObjectId)({
        type: 'ObjectId',
        required: true
      }, undefined);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('must validate an ObjectId and fail for sending a non-string attribute', function () {
    expect(function () {
      (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, 123);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid ObjectId.'
    });
  });
  it('must validate an ObjectId and fail for sending a string with length less than 24', function () {
    expect(function () {
      (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, '12345678901234567890123');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid ObjectId.'
    });
  });
  it('must validate an ObjectId and fail for sending a string with length greater than 24', function () {
    expect(function () {
      (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, '1234567890123456789012345');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid ObjectId.'
    });
  });
  it('must validate an ObjectId and fail for sending a string with invalid characters', function () {
    expect(function () {
      (0, _validators.isValidObjectId)({
        type: 'ObjectId'
      }, '12345678901234567890123!');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid ObjectId.'
    });
  });
});
describe('Buffer Validator', function () {
  it('should validate a Buffer with success', function () {
    var response = (0, _validators.isValidBuffer)({
      type: 'Buffer'
    }, Buffer.from('test'));
    expect(response).toBe(undefined);
  });
  it('should validate a Buffer with success passing a null value without required setted', function () {
    var response = (0, _validators.isValidBuffer)({
      type: 'Buffer'
    }, null);
    expect(response).toBe(undefined);
  });
  it('should validate a Buffer with success passing a undefined value without required setted', function () {
    var response = (0, _validators.isValidBuffer)({
      type: 'Buffer'
    }, undefined);
    expect(response).toBe(undefined);
  });
  it('should validate a Buffer with error passing a null value with required setted', function () {
    expect(function () {
      (0, _validators.isValidBuffer)({
        type: 'Buffer',
        required: true
      }, null);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('should validate a Buffer with error passing a undefined value with required setted', function () {
    expect(function () {
      (0, _validators.isValidBuffer)({
        type: 'Buffer',
        required: true
      }, undefined);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('must validate a Buffer and fail for sending a non-string attribute', function () {
    expect(function () {
      (0, _validators.isValidBuffer)({
        type: 'Buffer'
      }, 123);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Buffer.'
    });
  });
  it('must validate a Buffer and fail for sending a string with length less than 24', function () {
    expect(function () {
      (0, _validators.isValidBuffer)({
        type: 'Buffer'
      }, '12345678901234567890123');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Buffer.'
    });
  });
  it('must validate a Buffer and fail for sending a string with length greater than 24', function () {
    expect(function () {
      (0, _validators.isValidBuffer)({
        type: 'Buffer'
      }, '1234567890123456789012345');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Buffer.'
    });
  });
  it('must validate a Buffer and fail for sending a string with invalid characters', function () {
    expect(function () {
      (0, _validators.isValidBuffer)({
        type: 'Buffer'
      }, '12345678901234567890123!');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Buffer.'
    });
  });
});
describe('Decimal128 Validator', function () {
  it('should validate a Decimal128 with success', function () {
    expect(function () {
      return (0, _validators.isValidDecimal128)({
        type: 'Decimal128'
      }, '123.456');
    }).not.toThrow();
  });
  it('should validate a Decimal128 with success passing a null value without required setted', function () {
    expect(function () {
      return (0, _validators.isValidDecimal128)({
        type: 'Decimal128'
      }, null);
    }).not.toThrow();
  });
  it('should validate a Decimal128 with success passing a undefined value without required setted', function () {
    expect(function () {
      return (0, _validators.isValidDecimal128)({
        type: 'Decimal128'
      }, undefined);
    }).not.toThrow();
  });
  it('should validate a Decimal128 with error passing a null value with required setted', function () {
    expect(function () {
      (0, _validators.isValidDecimal128)({
        type: 'Decimal128',
        required: true
      }, null);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('should validate a Decimal128 with error passing a undefined value with required setted', function () {
    expect(function () {
      (0, _validators.isValidDecimal128)({
        type: 'Decimal128',
        required: true
      }, undefined);
    }).toThrow({
      httpErrorCode: 400,
      message: 'The attribute is required.'
    });
  });
  it('must validate a Decimal128 and fail for sending a non-string and non-numeric attribute', function () {
    expect(function () {
      (0, _validators.isValidDecimal128)({
        type: 'Decimal128'
      }, []);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Decimal128.'
    });
  });
  it('must validate a Decimal128 and fail for sending a string with invalid characters', function () {
    expect(function () {
      (0, _validators.isValidDecimal128)({
        type: 'Decimal128'
      }, '12345678901234567890123!');
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Decimal128.'
    });
  });
});
describe('Map Validator', function () {
  var userSchema = new _mongoose["default"].Schema({
    preferences: {
      type: Map,
      of: String
    }
  });
  var preferences = userSchema.tree.preferences;
  it('should validate a Map of text with success', function () {
    expect(function () {
      (0, _validators.isValidMap)(preferences, {
        'color': 'blue',
        'language': 'english'
      });
    }).not.toThrow();
  });
  it('should validate a Map with success passing a null value without required setted', function () {
    expect(function () {
      return (0, _validators.isValidMap)(preferences, null);
    }).not.toThrow();
  });
  it('should validate a Map with success passing a undefined value without required setted', function () {
    expect(function () {
      return (0, _validators.isValidMap)(preferences, undefined);
    }).not.toThrow();
  });
  it('should validate a Map with error passing a null value with required setted', function () {
    expect(function () {
      (0, _validators.isValidMap)({
        type: 'Map',
        required: true
      }, null);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('should validate a Map with error passing a undefined value with required setted', function () {
    expect(function () {
      (0, _validators.isValidMap)({
        type: 'Map',
        required: true
      }, undefined);
    }).toThrow({
      'httpErrorCode': 400,
      'message': 'The attribute is required.'
    });
  });
  it('must validate a Map and fail for sending a non-object attribute', function () {
    expect(function () {
      (0, _validators.isValidMap)({
        type: 'Map'
      }, 1);
    }).toThrow({
      httpErrorCode: 400,
      message: 'Invalid Map.'
    });
  });
});