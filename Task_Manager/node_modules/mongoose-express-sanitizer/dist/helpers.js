"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var _validators = require("./validators.js");

var _mongoose = _interopRequireWildcard(require("mongoose"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var possibleTypes = ['String', 'Number', 'Boolean', 'Array', 'Date', 'Map', 'Decimal128', 'ObjectId', 'Buffer', 'BigInt', 'UUID'];

function isFirstCharacterVowel(str) {
  // Convert the string to lowercase for case-insensitive comparison
  var firstChar = str.toLowerCase().charAt(0); // Check if the first character is a vowel

  return ['a', 'e', 'i', 'o', 'u'].includes(firstChar);
}

var sellectedAttributeType = function sellectedAttributeType(attribute) {
  if (attribute instanceof _mongoose["default"].Schema.Types.ObjectId) return 'ObjectId';
  if (attribute instanceof _mongoose["default"].Schema.Types.Decimal128) return 'Decimal128';
  if (attribute instanceof _mongoose["default"].Schema.Types.Buffer) return 'Buffer';
  if (attribute instanceof _mongoose["default"].Schema.Types.Map) return 'Map';
  if (attribute instanceof _mongoose["default"].Schema.Types.Array) return 'Array';
  if (attribute instanceof _mongoose["default"].Schema.Types.Date) return 'Date';
  if (attribute instanceof _mongoose["default"].Schema.Types.Number) return 'Number';
  if (attribute instanceof _mongoose["default"].Schema.Types.String) return 'String';
  if (attribute instanceof _mongoose["default"].Schema.Types.Boolean) return 'Boolean';
};

var getTypeFromString = function getTypeFromString(type) {
  if (typeof attribute === 'string' && possibleTypes.includes(type)) return type;
  throw {
    message: 'Invalid type',
    httpErrorCode: 400
  };
};

var validateElementOfSchema = function validateElementOfSchema(schemaAttribute, paramReceived) {
  var _Schema$Types = _mongoose.Schema.Types,
      Decimal128 = _Schema$Types.Decimal128,
      ObjectId = _Schema$Types.ObjectId,
      Buffer = _Schema$Types.Buffer;
  var type = schemaAttribute.type ? schemaAttribute.type : sellectedAttributeType(schemaAttribute);

  if (schemaAttribute.type === Map) {
    (0, _validators.isValidMap)(schemaAttribute, paramReceived);
    return;
  }

  if (schemaAttribute.type === Buffer) {
    (0, _validators.isValidBuffer)(schemaAttribute, paramReceived);
    return;
  }

  if (typeof type === 'string') {
    type = getTypeFromString(type);
  }

  switch (type) {
    case String:
      (0, _validators.isString)(schemaAttribute, paramReceived);
      break;

    case Number:
      (0, _validators.isNumber)(schemaAttribute, paramReceived);
      break;

    case Boolean:
      (0, _validators.isBoolean)(schemaAttribute, paramReceived);
      break;

    case Array:
      (0, _validators.isArray)(schemaAttribute, paramReceived);
      break;

    case Date:
      (0, _validators.isDate)(schemaAttribute, paramReceived);
      break;

    case Decimal128:
      (0, _validators.isValidDecimal128)(schemaAttribute, paramReceived);
      break;

    case ObjectId:
      (0, _validators.isValidObjectId)(schemaAttribute, paramReceived);
      break;

    case Buffer:
      (0, _validators.isValidBuffer)(schemaAttribute, paramReceived);
      break;

    default:
      throw {
        message: 'Invalid type',
        httpErrorCode: 400
      };
  }
};

module.exports = {
  isFirstCharacterVowel: isFirstCharacterVowel,
  sellectedAttributeType: sellectedAttributeType,
  getTypeFromString: getTypeFromString,
  validateElementOfSchema: validateElementOfSchema
};